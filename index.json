[{"content":"Last Updated: 28 June 2022\nIntroduction Hello! My name is Brian. I have just transferred to Simon Fraser University\u0026rsquo;s Software Systems program this summer after graduating from Langara with an Associate in Computer Science.\nIn this guide, I will show you all the knowledge that I have accumulated to successfully transfer to Simon Fraser University (CS/ SoSy). You can also check out this guide for the UBC version.\nMy guide here is mainly intended for Langara College students aiming to transfer to SFU. Though the general advice may still apply if you are from other colleges :).\nDisclaimer: transfer requirements may change at any point in time. It is best to verify the requirements on the university\u0026rsquo;s website and check with advising. I will not be responsible for any misinformation caused if, by any chance, some parts of this guide are not up-to-date anymore. Though if you find one, I will heavily appreciate it if you can contact me so I\u0026rsquo;ll update the guide :).\nApplying to SFU You need to use EducationPlannerBC to apply to SFU. You can go to the Apply section and sign up/log in with your EducationPlannerBC Account.\nIf the application process has not been changed, you can choose up to 2 areas of the program to apply to. The first program is the one you want to get into and the second one is the backup program.\nThere are 2 possible strategies that I learned here:\n If you have a decent grade, you can choose both Software Systems and Computer Science in both of your options. This maximizes the chances for you to take computer science courses later. If you are not too sure whether you will get in, you can choose either Software Systems/ Computer Science as your first option and choose any program that is usually less competitive to get into. This maximizes the chance for you to get into SFU first.  Checking Admission Averages is highly recommended. The difficulty may vary whether you are a domestic or international student. In the past, Software Systems has lower GPAs than Computer Science (but not always).\nFor the second option, if you got admitted to your second option. I would recommend to still continue taking courses at Langara if you still have less than 60 credits. Many people agreed that internal transfer (changing major) is harder than external transfer. Though if you are unsure, you can check simonfraser reddit and search around this topic.\nGeneral Strategy Depending on your confidence in your ability to get good GPAs, there are different ways to take your courses and when to transfer. I will describe it here below.\nWays to pick the courses:\n The Smart Way - Focus on only taking the core requirements. This is best suited for those who are confident they can get the grade requirement to transfer. This strategy will benefit you later in the university where you will still have many rooms for electives. The Booster Way - Take the core requirements and also several electives at Langara. This is best suited for those who are not sure whether they can achieve the required GPA. By carefully picking the courses that might potentially boost the GPA, the person using this strategy may have a higher chance to get into SFU.  From my experience, MATH and ENGL are famous as a GPA downer. This also heavily depends a lot on the person\u0026rsquo;s liking.\nWhen to transfer:\n Associate Transfer - If you are transferring with an associate degree, you will receive a preference in admission by having a GPA of 0.25 points less than the regular transfer. Source Quick Transfer - Best suited for those who currently have a good average and/or those who want to get into the university as soon as possible. This is also good if you want to get into the coop program as soon as possible. Full Transfer - Transfers with a lot of credits but do not finish with an associate degree.  Choosing when to transfer also heavily determines how you will pick the courses. Usually, Associate transfer does not really let you choose which courses to take (unlike the 2 other ways). I end up taking all the required MATH and ENGL courses.\nIn general, more transferred credits will save you money while transferring quickly will allow you to get into the coop program quickly. There are no better ways of transferring as each has its own pros and cons.\nI personally prefer to get the associate first to save cost. As of Sept 1, 2022, 1 SFU credit is $1,059.15 while 1 Langara credit is $625.40 (International student fees). I also get to enjoy the smaller class experience here.\nAdmission Requirements SFU Admission Requirements.\nAs this topic may change at any point in time, checking the website above is highly recommended.\nHere are the requirements that you need to take as a college transfer student:\n English Language admission requirement Quantitative and Analytical skills requirement  Minimum 24 units of transferable coursework, including:\n One Mathematics course from:  MACM 101 = LANG CPSC 2190 (Discrete Math) MATH 150 (or 151) = LANG MATH 1171 (Calculus 1) MATH 152 = LANG MATH 1271 (Calculus 2) MATH 240 (or 232) = LANG MATH 1252 (or 2362)   One Computing Science course from:  CMPT 125 (or 126, 128 or 135) = LANG CPSC 1181 (or 1155) CMPT 225 = LANG CPSC 2150 CMPT 276 (or 275) = LANG CPSC 2350   One additional Mathematics or Computing science course chosen from the above lists.  Langara Courses to Take Useful websites to determine these courses:\n BCTransferGuide SFU CS Fall 2022 SFU SoSy Fall 2022 Langara CS Associate  First and foremost, I highly emphasize the importance of choosing the right course (with the right professor). It is quite common to see people picking the wrong course, thus ending up wasting a lot of time and money.\nI define 3 types of courses that can be taken here:\n Core - Core for SFU CS/ SoSy. Recommended - Not core, but useful to take (either GPA booster or count towards graduation requirement).   CPSC and MATH Course Prerequisite Diagram   Core Courses I mainly define core courses as courses that are part of the graduation requirement at SFU. Bare in mind that you do not need to take all core courses to transfer to SFU. If you intend to transfer ASAP, taking CPSC 1150, 1181, Math 1171, and 1271 is sufficient.\nNOT ALL CORE COURSES ARE RECOMMENDED.\nI won\u0026rsquo;t recommend taking STAT 2281 unless you have no other choice. I also won\u0026rsquo;t recommend taking CPSC 2350 by any means since it has 6 credits as prerequisite (CPSC 1030 and CPSC 1045). Other core courses except these two should be fine to take.\n CPSC 1150: Program Design (3) -\u0026gt; SFU CMPT 120 (3)  Introduction to programming in Java. You will mainly learn about pseudocode, the basic syntax of Java (if/else, loop), and recursion (only tracing) in the last week. Prerequisite for most computer science courses in Langara (CPSC 1181, CPSC 2190, CPSC 2221) Alternatively, CPSC1155 is also available (Introduction in C++). It transfers to CMPT 120/128/130 but I heavily recommend just taking CPSC1150 as (1) Java is generally easier, (2) Java knowledge is required in CPSC 1181, and (3) you will learn enough C++ in CPSC1160 and CPSC 2150. Taken online with Bita Shadgar, her style of teaching is not my favorite. However, she is kind and patient, and always asks if in doubt.   CPSC 1181: Object-oriented Computing (3) -\u0026gt; SFU CMPT 125 (3)  More programming in Java. You will mainly learn about Object-Oriented Programming (OOP). Some other topics like JavaFX, multithreading and networking may be included. Taken online with Hossein Darbandi, he is the definition of work smart. All lectures are recorded and usually, he likes to take a tea break xD. Can be quite condescending at times, but he will answers the question regardless.   CPSC 1160: Algorithms and Data Structures I -\u0026gt; SFU CMPT 1XX (3)  Algo and DS in C++. You will learn a lot about recursion, linked lists, and trees. I find CPSC 1160 to be harder than 1181. So, even though you can take 1160 after 1150, I highly recommend taking CPSC 1181 first. Taking CPSC1160 and CPSC1181 at the same term can drain your energy as you will need to do 2 coding assignments every week. Required for CPSC 2150. Do not take this course if you don\u0026rsquo;t intend to take CPSC 2150 as it transfers only to general credit. Taken online with Muntaseer Salahuddin. He is one of the best CS lecturers in my time at Langara. Very passionate, funny, kind, and willing to answer your questions. His exam was the hardest in my time at Langara, but possibly it was because I took it online.   CPSC 2150: Algorithms and Data Structures II -\u0026gt; SFU CMPT 225 (3)  Second part of Algo and DS. CPSC 1160 topics are revisited. Will also learn about stacks, queues, heaps, and graph theory. I spent a lot of time in this course. The assignment is heavy (but interesting). The most favorite part is that the exam is more on the doable side. Possibly because I took it offline. Taken with Gladys Monagan. Might be a bit biased, but she is my favorite lecturer at Langara. As long as you show some effort in doing the assignment and ask good questions, she is willing to go above and beyond to help you.   CPSC 2190: Theoretical Foundations of Computer Science -\u0026gt; SFU MACM 101 (3)  Discrete Math. Quite different compared to calculus and the likes. You will learn about proofing, counting, and many other things. Some people hate it, and some like it. I am more on the latter part. This is my favorite math course as it reminds me of youtube riddles. Here is one of the topics it covers. Do a lot of suggested problems to familiarize yourself with the concepts. It may be given in the course outline, if it is there, do it! There is a high chance it will be included in quizzes or exams. Taken with Mahdad Khatirinejad. A favorite math professor at Langara. For me, his lecture is really engaging. The thing that I don\u0026rsquo;t like is that this course is very exam-based and a quiz is usually held at the end of class (some people prefer to study instead of listening to his lecture). Also, the minimum to get A+ is 96 (he scales though). Other people that I know took this course with Haotian Pang. The assignment is worth more in his class and the minimum for A+ is 90.   CPSC 2350: Software Practices -\u0026gt; SFU CMPT 276 (3).  Core, but not recommended to take. Learn about git and other software engineering tools. Technically, it\u0026rsquo;s a core but I didn\u0026rsquo;t take it as it requires CPSC 1030 and 1045 as its prerequisites (CPSC 1030 and 1045 do not count for graduation). Heavily recommended to just take this equivalent course later at SFU. CMPT 276 at SFU is famous for its hands-on group projects that will allow you to build interesting projects. I am taking CMPT 276 this summer and we are building a full-stack web application. The languages used may vary depending on the professor though (can be Java, JavaScript, Swift, and Ruby just to name some).   MATH 1171: Calculus 1 -\u0026gt; SFU MATH 151 (3)  Can be challenging for some people. Grind the suggested exercises and WebAssign to make sure you know the stuff. Interestingly, I didn\u0026rsquo;t take this course as I didn\u0026rsquo;t have the prerequisite at that time. I took MATH 1175 instead. Alternatively, you can take MATH 1173 (4). 1 more credit means $625.4 more expensive. Not really recommended unless you cannot take 1171 due to some reasons (MDT/ waitlist). You can also choose to take MATH 1174 (business)/ MATH 1175 (life science). I don\u0026rsquo;t recommend it as you need to get at least a B+ to make sure it is counted towards graduation in SFU. Taken online with Pichmony Anhaouy. He is really caring and the exam is on the easy side personally. Lecture notes are really organized. Recommended.   MATH 1271: Calculus 2 -\u0026gt; SFU MATH 152 (3).  Same advice as MATH 1171. Grind the suggested exercises if you are worried you won\u0026rsquo;t do good. You can choose to also take MATH 1273/1274/1275. But I still won\u0026rsquo;t recommend it due to reasons similar to calculus 1\u0026rsquo;s. Coming from MATH 1175, I find this course to be harder. A lot more concepts and formulas. Conceptually, I don\u0026rsquo;t find it that hard for each section. However, you need to understand which tool needs to be used for which problem. That is what makes it challenging. Taken online with Mahdad Khatirinejad. Really good :).   MATH 2362: Linear Algebra -\u0026gt; SFU MATH 240 (3)  Linear Algebra. Personally, I enjoy the content better than calculus. But unlike calculus, I don\u0026rsquo;t get to learn its applications, making it feels useless as I don\u0026rsquo;t know what I am going to use it for. However, this will be useful if you intend to learn computer graphics. Don\u0026rsquo;t forget to grind the suggested exercises! While this course can be taken as a corequisite with Calculus 2, I heavily recommend against it as taking these two in the same term will cause your brain to burst. Take it only if you are confident with math or have a lighter workload overall. Taken online with Pichmony Anhaouy. In the latter part of the courses, I kind of memorized the concepts for the final. Ended up getting a good grade but feels like I don\u0026rsquo;t get the whole concept.   STAT 2281: Probability and Elementary Mathematical Statistics -\u0026gt; SFU STAT 270 (3)  Core, but not recommended to take at Langara. All about discrete and continuous probabilities. Applications and proofs. Hardest math/stat course so far personally. Unless you are transferring with an associate or have no other courses to take, I don\u0026rsquo;t think you need to take this course at Langara. The grade that I got in this course is far below my other math courses. I have a friend in SFU taking STAT 270 and it was easier and covers a narrower topic. Taken with Ken Li (Shuk Wong Li). He is a funny guy, but I don\u0026rsquo;t find he was ready to teach this course. The assignment is almost always due on Sunday, My group of friends taking this basically had no weekend for the latter half of the term :)). I can see that he can be good at teaching the lower-level courses, but the concept in this course was just too hard to be taught and he makes a lot of calculation mistakes on the whiteboard. He might be better in the future though (I took it when it was his first time teaching this course). There was one time when he asks who finished the assignment and only one guy raised his hands up xD.    Recommended Courses I define recommended courses as courses that are not part of the core requirements of the CS/ SoSy major but definitely can be taken towards either SFU graduation requirements (upper-division CS, WQB requirement) and/or Langara graduation requirements.\n CPSC 1050: Introduction to Computer Science -\u0026gt; SFU CMPT 1XX (3)  WARNING: does not count towards anything in SFU, just a general elective. I still listed this course because required for the associate degree. Does not really transfer to CS course. However, this course gives a brief overview of what a CS degree looks like. The topic is quite similar to Harvard CS50. Has a lot of assignments. I don\u0026rsquo;t find it to be that hard, but it is by no means a light course. If you are diligent, this course can be a good GPA booster. Taken online with Alireza Osareh, his assignments have clear instructions. Even if unclear, you can always ask him to provide more clarity. Good!   CPSC 2130: Multimedia and Animation -\u0026gt; SFU CMPT 365 (3)  The most interesting CS courses (though not as useful) I have taken here. The topic is about image, audio, and video tools using JavaScript and Adobe technologies. We used Adobe Photoshop, Adobe Premiere Pro, and Adobe Audition in this course. I got to make 3D Ping Pong and Bird Comet Escape in this course :D. CMPT 365 is not really taken a lot in SFU, but taking here will help you to finish the upper-division CS requirement. While this course is really interesting, it can be hard for those who have no experience of HTML/ CSS/ JS. I have exposure to these language, so it was really not a problem for me. Taken with Anupama Gupta. She is really kind and understanding. Most of the lectures were recorded even though it is offline classes. I personally prefer it this way though.   CPSC 2221: Data Base Systems -\u0026gt; SFU CMPT 354 (3)  Database is a really useful course. I believe most people in the CS program will also take this course, so it\u0026rsquo;s better if you take it now. More focused on the database design and SQL queries. We don\u0026rsquo;t really learn how to use the database, link it to the website, and deploy it to the cloud here. I find this to be one of the easier courses. It might also be because I took it in the last term after finishing most cs courses. Really interesting IMO. Taken with Saeed Mirjalili. Really engaging lecture and helpful. Not really accessible through email. Recommended to just ask him questions in person.   APSC 1010: Engineering and Technology in Society and APSC 1050: Process, Form, and Convention in Professional Genres -\u0026gt; SFU ENSC 100 (3) B-Hum/Sci and SFU ENSC 105 (3).  Combined as this course is a co-requisite. I would say this is useful if you intend to transfer to SoSy as ENSC 105 counts as the writing requirement. You can use ENSC 100 for the breadth requirement. APSC 1050 is taken with Hannah Gustafson. Her online lecture is the best I have had so far as she really tries to make the class as engaging as possible. She also has a cute little baby. Highly recommended! APSC 1010 is taken with Zahra Tayarani. I don\u0026rsquo;t think she is teaching again. The lecture is a bit boring as she basically only reads out the slides.   PSYC 1115: Introduction to Biological, Cognitive, and Developmental Psychology -\u0026gt; SFU PSYC 100 (3) B-Soc  Counted as B-Soc for SFU WQB requirement. This psychology course is more biology-like. I took this after taking PSYC 1215. Honestly, I prefer PSYC 1215 more as I find social psychology to be more interesting. Not always a GPA booster in my opinion. Take it if you think you enjoy reading textbooks and are good at memorizing. Taken online with Noushine Afshar. I don\u0026rsquo;t really get to interact with her as it was online and every lecture is recorded. PSYC 1115 and 1215 are mostly just self-learning through the launchpad. The course has 3 exams (the last one is cumulative).   PSYC 1215: Introduction to Social, Personality, and Abnormal Psychology -\u0026gt; SFU PSYC 102 (3) B-Soc  Counted as B-Soc for SFU WQB requirement. Not always a GPA booster in my opinion. Take it if you think you enjoy reading textbooks and are good at memorizing. Social Psychology. Arguably the most interesting course I have taken outside my major. I find some concepts here that really make sense and I like to apply them in my daily life (ex. bystander effect, spotlight effect, confirmation bias, discrimination) Taken online with Laura Adams. Really enjoyable lecture with her.   CPSC 1030: Web Development I or CPSC 1045: Introduction to Web Programming -\u0026gt; SFU CMPT 165 (3) BOTH  Not counted at all for SFU graduation requirement nor Langara associate requirement. You can still count them as general elective though. However, I highly recommend this course as a potential GPA booster course if you have taken at least CPSC 1150. Labelled as B-Sci, but this is a CPSC course. It will not be counted towards breadth for CS/ SoSy Major. If your GPA is slightly below 3.7, I heavily recommend taking this course to get that sweet transfer scholarship (you can see details in the general tips section below). Have not taken either these two courses, but I have taught these courses as a teaching assistant. Personally, I found CPSC 1030 to be the easiest. CPSC 1045 should be slightly easier or equal to CPSC 1150 in terms of difficulty. The difficulty of these two courses may also depend on your instructor .    My recommended courses are just courses that I have experience with. I won\u0026rsquo;t recommend PSYC1115 and PSYC1215 blindly to everyone as there are also different courses you can take (see SFU WQB Requirements below).\nSFU WQB Requirements SFU WQB Link\nBelow, I am copy-pasting the information from SFU.\nIn SFU, every undergraduate student needs to take a minimum of 36 credits of courses designated as Writing, Quantitative, or Breadth, with a grade of C- or better to receive WQB credits.\nWriting Requirements:\n one lower-division W course (CMPT105W for CS, SoSy has much more choices) one upper-division W course (CfMPT376W for both CS and SoSy, must be taken at SFU)  Quantitative Requirements:\n two Q courses (we don\u0026rsquo;t really need to care about this as CS majors already have a lot of quantitative courses)  Breadth Requirements:\n two B-Hum courses (I took ENGL 1130 and APSC 1010 for this) two B-Sci courses. (I took BIOL 1115 and CPSC 2190 for this)  MACM 101 (CPSC 2190) already counted for one B-Sci   two B-Soc courses (I took PSYC 1115 and 1215 for this) two undesignated Breadth (6 units) (Any courses outside the major should qualify, my SFU shows it is ENGL 1123 and APSC 1050 for this)  Important to Remember: Breadth Courses are courses that is outside your major. So, any CPSC course with Breadth label will not be counted.\nTo make sure that we still have the same requirements, I recommend going to SFU CS form website and check the graduation planner. I used Computing Science Major - Fall 2021 and Software Systems Major for this. It still have the same requirements up until the time of written.\nThere are many options to fulfill your courses for the SFU WQB requirement. You can check SFU designated breadth course and BCTransferGuide for the available courses.\nGenerally, you do not need to finish all the WQB requirements at Langara. However, if you plan to take some electives before transferring, it is best to take the ones that are also counted as SFU Breadth courses.\nGraduating with an Associate Degree As an international student, an associate degree allows you to get a post-graduation work permit. This is really useful in case you may prefer to work first instead of transferring to university right away. Also, it will allow you to get preference in university admission (SFU only).\nAssociate Degree Link\nOne of the things that make course planning a bit challenging is making sure that I need to find the course that is counts for both my Langara Associate and SFU Software Systems. Make sure to check the BCTransferGuide, SFU website, and Langara Associate Degree website.\nCourses I took:\n Core courses: CPSC 1050, 1160, 1181, 2150, MATH 2362, CPSC 1150, MATH 1175, MATH 1271 Second-year CPSC courses: CPSC 2130 and CPSC 2221 Two ENGL courses: ENGL 1123 and 1130 Two university-transferable arts: PSYC 1115 and 1215 Two second-year science courses: STAT 1181 and STAT 2281 Four university-transferable electives (at least 1 lab science): CPSC 2190, APSC 1010, APSC 1050, BIOL 1115  Langara website to determine course attributes\nTo check whether a course is university-transferable or not, you can go to the website above and check if there is a \u0026lsquo;Y\u0026rsquo; in the UT attribute. Better way, you can go to BCTransferGuide to check if this course is transferred to at least one University (This is told by Advising).\nChecking whether a course is an arts course is a bit harder, I have confirmed this on advising on November of 2020. While I don\u0026rsquo;t think this have not changed at all, you can confirm this on advising again. This is what the advising person said:\n \u0026ldquo;Arts electives are typically non-Science/Math and non-Business courses. You’re correct, we do not have an attribute for first-year Arts courses, however you can choose from the Arts and Humanities \u0026amp; Social Sciences categories in our Course Index when choosing Arts courses.\u0026rdquo; - Langara Counselling\n FAQ  Why Software Systems over Computer Science? What is the difference?  First off, I will start by saying I don\u0026rsquo;t think there is much difference between these two. Software Systems are just a subset of Computer Science. You still can be a CS major and take the same courses as the SoSy major. You can take a look at this Reddit post.\nPersonally, other reasons I chose SoSy over CS are:\n SoSy gets priority enrollment in Surrey CS courses (they still have the same priority as CS students in Burnaby). I will not need to take CMPT105W and MACM316. Honestly, I am okay taking if I need to take these two courses. But if I have to choose between taking these or the sweet upper-division CS courses, I would definitely choose the latter :).  As of Fall 2022, SFU CS also has a concentration that you can take.\nWhy UBC over SFU?  This is the question I had been wondering the most when I was at Langara. I never got a solid answer only until Spring 2022.\nI don\u0026rsquo;t think there are clear answers for everyone and the answer definitely varies from person to person. Keep in mind that these are the answers that I answered for myself.\nSFU Pros:\n SFU offers more practical CS courses. In general, CS courses at SFU are more applied. By taking a look at SFU SoSy, there are more interesting CS courses to be found (ex. Web Architecture, Client-side WebDev, Server-side WebDev, Software Development Methods, Software Testing). SFU is cheaper. As an international student, I saved at least CAD 20,000 by choosing to go to SFU over UBC. I don\u0026rsquo;t need to take more lab sciences at UBC. UBC requirement is more strict. I would need to take another physics and chemistry course there. Computer Science is merit-based. Compared to other majors, the university you go to does not matter as much. After several years in the industry, you will be assessed more based on your industry experience, not which university you went to.  However, I don\u0026rsquo;t want to be biased. So I also want to list several reasons why UBC might be better.\nUBC Pros:\n Prestige. The brand of the university also matters more if you were to work outside Canada. Environment. As UBC is just ranked higher, there are generally smarter students that thrive there. However, a few caveats, I think that the reasons some students thrive there are not because of the university, but because of the student itself. I still agree that there will also be many people that succeed because of their peers though.  At the end of the day, your answer will ultimately depends on what you think is more important for you :). Both university has strong coop programs. As long as you have a strong drive to learn, you will definitely succeed anywhere in life.\nGeneral Tips  SFU offers admission 3 times a year (spring, summer, and fall). Plan your course carefully. A few hours of course planning can save you a lot of time and money. If you have GPA above 3.7, you may get a $3500 entrance scholarship at SFU. This is really helpful! Taking 3 courses and passing all of them is far better than taking 5 courses but ending up failing one of them. Unless you enjoy math, try to not have more than 1 math course at one term. I would define math courses as any math/ stat course and CPSC 2190. Personally, I perform better on math course where I can finish the given suggested exercises. I don\u0026rsquo;t think I can mentally handle taking two math courses while also finishing all their suggested exercises. Same rule applies to heavy coding course. When you are starting out at college, it can be hard to differentiate the syntax between each programming language. It may end up making you confused on the exams if you are taking two at the same time. Not all CPSC courses are heavy coding course. I would define heavy coding course as one of the following: CPSC 1045, 1150, 1155, 1160, 1181, 2130, 2150.  General Study Tips  Always go to your office during hours if needed. Langara\u0026rsquo;s biggest advantage is the empty office hours. There are times when my CS instructor was able to go above and beyond to help me solve my assignments. Find a study buddy (if you don\u0026rsquo;t have one). While I learn better alone, there will always be the time when I just don\u0026rsquo;t know how to answer some questions. Even if you are the smarter one, teaching will also help you to understand the concepts better. Read the Feynman Technique for more.  Courses I Have Taken Fall 2020\n APSC 1010 - Engineering and Technology in Society APSC 1050 - Process, Form, and Convention in Professional Genres MATH 1175 - Calculus I with Applications to Life Sciences  Spring 2021\n MATH 1271 - Calculus II CPSC 1050 - Introduction to Computer Science CPSC 1150 - Program Design STAT 1181 - Descriptive and Elementary Inferential Statistics BIOL 1115 - General Biology I  Summer 2021\n PSYC 1215 - Introduction to Social, Personality, and Abnormal Psychology CPSC 1160 - Algorithms and Data Structures I CPSC 1181 - Object-oriented Computing ENGL 1107 - Language and Composition I MATH 2362 - Linear Algebra  Fall 2021\n CPSC 2150 - Algorithms and Data Structures II CPSC 2190 - Theoretical Foundations of Computer Science ENGL 1123 - Introduction to Academic Writing PSYC 1115 - Introduction to Biological, Cognitive, and Developmental Psychology  Spring 2022\n CPSC 2130 - Multimedia and Animation CPSC 2221 - Database Systems STAT 2281 - Probability and Elementary Mathematical Statistics ENGL 1130 - Modern Novel, Poetry, and Movie  Overall, I am very pleased with the courses I have taken. The one that is not that useful for transfer is STAT 1181 and ENGL 1107. I also won\u0026rsquo;t recommend BIOL 1115 as it is a 4-credit course. It has 3 lab exams, 2 midterms, and a final. Quite stressful for 1 course.\nIf I have to start all over again at Langara, I would definitely take roughly the same courses. The one that I would change is only BIOL 1115 to any 3-credit lab science course. I basically burnt 1 credit worth of a course as I have 61 transfer credits.\nUseful Links As there are so many links throughout this guide, I have listed again all the helpful transfer-related links below\nOfficial Website\n BCTransferGuide - https://www.bctransferguide.ca/search BCTransferGuide Associate Degree Info - https://www.bctransferguide.ca/learn-more-about/associate-degrees/transfer/ EducationPlannerBC - https://educationplannerbc.ca/ Canada PGWP - https://www.canada.ca/en/immigration-refugees-citizenship/services/study-canada/work/after-graduation/eligibility.html  Langara Websites\n Langara Associate in CS - https://langara.ca/programs-and-courses/programs/computer-science/program-curriculum.html Langara Course Attributes - https://langara.ca/programs-and-courses/courses/course-attributes.html  SFU Websites\n SFU Admission Averages - https://www.sfu.ca/students/admission/apply/admission-averages.html SFU Admission Requirements - https://www.sfu.ca/students/admission/admission-requirements/transfer/college-university.html SFU CS Fall 2022 - http://www.sfu.ca/students/calendar/2022/fall/programs/computing-science/major/bachelor-of-science-or-bachelor-of-arts.html SFU SoSy Fall 2022 - http://www.sfu.ca/students/calendar/2022/fall/programs/software-systems/major/bachelor-of-science.html SFU WQB Requirements - https://www.sfu.ca/ugcr/for_students/wqb_requirements.html SFU CS Concentrations - https://www.sfu.ca/computing/current-students/undergraduate-students/programs/computing-science-major1.html SFU Transfer Scholarships - https://www.sfu.ca/students/financialaid/entrance/regulations/transfer-scholarships.html SFU Designated Breadth Course - https://www.sfu.ca/ugcr/for_faculty/certified_wqb_courses/certified_designated_breadth_courses.html SFU CS Form Website - http://www.sfu.ca/computing/current-students/undergraduate-students/forms.html  Reddit Posts\n Langara to UBC CS Reddit - https://www.reddit.com/r/langara/comments/ufzqc0/guide_for_cs_students_planning_to_transfer_to_ubc/ SFU SoSy Masterpost Reddit - https://www.reddit.com/r/simonfraser/comments/bmt2zc/software_systems_program_bsc_masterpost/  Conclusion Thank you so much for reading up until this point. I finally have made this guide after planning to make it for so long. The reasons I made this guide are mainly to make sure people avoid bad course and to save time and energy. I have an spent a lot of time planning my courses when I think it should not be that long.\nIn case you see any error in writing or have information to be added, feel free to reach me out.\n","permalink":"https://brianrahadi.github.io/posts/sfu-cs-transfer-guide/","summary":"Last Updated: 28 June 2022\nIntroduction Hello! My name is Brian. I have just transferred to Simon Fraser University\u0026rsquo;s Software Systems program this summer after graduating from Langara with an Associate in Computer Science.\nIn this guide, I will show you all the knowledge that I have accumulated to successfully transfer to Simon Fraser University (CS/ SoSy). You can also check out this guide for the UBC version.\nMy guide here is mainly intended for Langara College students aiming to transfer to SFU.","title":"Langara CS to SFU CS/ SoSy Transfer Guide"},{"content":"In my transition period from junior high to high school years, I used to be paid to write. Sounds cool at first, until I told everyone that I am just writing for a game guide.\nLooking back, I regret that I did not write as much again. Aside from the good money that I got from writing the blog posts, I got to know more about the game mechanics. Writing has helped me to refine my understanding of the game, allowing me to become a better player.\nI never wrote anymore until I came past a book called How to Take Smart Notes in my senior year of high school. This book taught me many benefits of writing. This is one of the main quotes that I really resonated with:\n The most important advantage of writing is that it helps us to confront ourselves when we do not understand something as well as we would like to believe - Sönke Ahrens\n There are many more things that I got from this book, but the main one is those who write are those who constantly refine their understanding of what is a good argument and what isn\u0026rsquo;t.\nWriting will truly challenge your way of thinking. Good writing can summarize a big idea as clearly and concisely as possible. I am still far from that, but I will try!\nFor now, I will try to write more when I am learning any topic in college or outside of it\nSo, write more to become a better \u0026lsquo;player\u0026rsquo; in whatever \u0026lsquo;game\u0026rsquo; you are playing right now ;).\n","permalink":"https://brianrahadi.github.io/posts/whywrite/","summary":"In my transition period from junior high to high school years, I used to be paid to write. Sounds cool at first, until I told everyone that I am just writing for a game guide.\nLooking back, I regret that I did not write as much again. Aside from the good money that I got from writing the blog posts, I got to know more about the game mechanics. Writing has helped me to refine my understanding of the game, allowing me to become a better player.","title":"Why you should write more ✍(◔◡◔)"},{"content":" Self-help advice which tells you to become the person you want to be only reinforces the idea that you are not that thing Pursuing something only reinforces that you lack it in the first place. Everyone wants you to believe that the secret to a good life is to have a nicer job or a better car or a prettier girlfriend. The key to a good life is not giving a fuck about more; it’s giving a fuck about less, giving a fuck about only what is true and immediate and important. Because there’s an infinite amount of things we can now see or know, there are also an infinite number of ways we can discover that we don’t measure up, that we’re not good enough, that things aren’t as great as they could be. The desire for a more positive experience is itself a negative experience. And, paradoxically, the acceptance of one’s negative experience is itself a positive experience. Accepting your experience of life as being great and wonderful is the single greatest thing you can do for your happiness. If you are able to not give a fuck about the pain your goals require, then you become unstoppable. The moments when we don’t give a fuck and take action are often the moments that most define the course of our lives. Don\u0026rsquo;t hope for a life without problems. Hope for a life with good problems. Negative emotions are a sign that something is going unaddressed. They are a call to action. Positive emotions are the reward for taking the correct action Certainty is the enemy of growth. All beliefs are wrong—some are just less wrong than others. Trust is the most important ingredient in any relationship for the simple reason that without trust the relationship doesn’t actually mean anything.   “We’re all going to die, all of us. What a circus! That alone should make us love each other, but it doesn’t.” -Charles Bukowski\n ","permalink":"https://brianrahadi.github.io/posts/subtleart/","summary":"Self-help advice which tells you to become the person you want to be only reinforces the idea that you are not that thing Pursuing something only reinforces that you lack it in the first place. Everyone wants you to believe that the secret to a good life is to have a nicer job or a better car or a prettier girlfriend. The key to a good life is not giving a fuck about more; it’s giving a fuck about less, giving a fuck about only what is true and immediate and important.","title":"Book Summary - The Subtle Art of Not Giving a Fuck"},{"content":"Building Wealth Understand How Wealth Is Created It’s not really about hard work. You can work in a restaurant eighty hours a week, and you’re not going to get rich. Getting rich is about knowing what to do, who to do it with, and when to do it. It is much more about understanding than purely hard work.\nWealth is the thing you want. Wealth is assets that earn while you sleep. Wealth is the factory, the robots, cranking out things. Wealth is the computer program that’s running at night, serving other customers. Wealth is even money in the bank that is being reinvested into other assets, and into other businesses.\nFind a Position of Leverage We live in an age of infinite leverage, and the economic rewards for genuine intellectual curiosity have never been higher. Following your genuine intellectual curiosity is a better foundation for a career\nCoding, writing books, recording podcasts, tweeting, YouTubing—these kinds of things are permissionless. You don’t need anyone’s permission to do them, and that’s why they are very egalitarian. They’re great equalizers of leverage. Every great software developer, for example, now has an army of robots working for him at nighttime while he or she sleeps, after they’ve written the code, and it’s cranking away.\nPrioritize and Focus Status games are always going to exist. There’s no way around it, but realize most of the time, when you’re trying to create wealth and you’re getting attacked by someone else, they’re trying to increase their own status at your expense. They’re playing a different game.\nFind Work That Feels Like Play What you really want is freedom. You want freedom from your money problems, right? I think that’s okay. Once you can solve your money problems, either by lowering your lifestyle or by making enough money, you want to retire. Not retirement at sixty-five years old, sitting in a nursing home collecting a check retirement—it’s a different definition.\nWell, one way is to have so much money saved that your passive income (without you lifting a finger) covers your burn rate. A second is you just drive your burn rate down to zero—you become a monk. A third is you’re doing something you love. You enjoy it so much, it’s not about the money. So there are multiple ways to retirement.\nAnother thing that helps: I value freedom above everything else. All kinds of freedom: freedom to do what I want, freedom from things I don’t want to do, freedom from my own emotions or things that may disturb my peace. For me, freedom is my number one value.\nHow to Get Lucky Ways to get lucky: • Hope luck finds you. • Hustle until you stumble into it. • Prepare the mind and be sensitive to chances others miss. • Become the best at what you do. Refine what you do until this is true. Opportunity will seek you out. Luck becomes your destiny.\n“In a long-term game, it seems that everybody is making each other rich. And in a short-term game, it seems like everybody is making themselves rich.”\nI have great people in my life who are extremely successful, very desirable (like everybody wants to be their friend), very smart. Yet, I’ve seen them do one or two things slightly not great to other people. The first time, I’ll say, “Hey, I don’t think you should do this to that other person. Not because you won’t get away with it. You will get away with it, but because it will hurt you in the end.”\nBe Patient One thing I figured out later in life is generally (at least in the tech business in Silicon Valley), great people have great outcomes. You just have to be patient. Every person I met at the beginning of my career twenty years ago, where I looked at them and said, “Wow, that guy or gal is super capable—so smart and dedicated”…all of them, almost without exception, became extremely successful. You just had to give them a long enough timescale. It never happens in the timescale you want, or they want, but it does happen.\nThis is not to say it’s easy. It’s not easy. It’s actually really freaking hard. It is the hardest thing you will do. But it’s also rewarding. Look at the kids who are born rich—they have no meaning to their lives.\nMoney buys you freedom in the material world. It’s not going to make you happy, it’s not going to solve your health problems, it’s not going to make your family great, it’s not going to make you fit, it’s not going to make you calm. But it will solve a lot of external problems. It’s a reasonable step to go ahead and make money.\nBuilding Judgment Hard work is really overrated. How hard you work matters a lot less in the modern economy.\nLearn to Love to Read\nReading a book isn’t a race—the better the book, the more slowly it should be absorbed.\nThe best way to have a high-quality foundation (you may not love this answer), but the trick is to stick to science and to stick to the basics. Generally, there are only a few things you can read people don’t disagree with. Very few people disagree 2+2=4, right? That is serious knowledge. Mathematics is a solid foundation.\nI came up with this hack where I started treating books as throwaway blog posts or bite-sized tweets or posts. I felt no obligation to finish any book. Now, when someone mentions a book to me, I buy it. At any given time, I’m reading somewhere between ten and twenty books. I’m flipping through them.\nLearning Happiness We are highly judgmental survival-and-replication machines. We constantly walk around thinking, “I need this,” or “I need that,” trapped in the web of desires. Happiness is the state when nothing is missing. When nothing is missing, your mind shuts down and stops running into the past or future to regret something or to plan something.\nHappiness to me is mainly not suffering, not desiring, not thinking too much about the future or the past, really embracing the present moment and the reality of what is, and the way it is.\nIt’s most obvious if you ever just sit down and try and do nothing, nothing. I mean nothing, I mean not read a book, I mean not listen to music, I mean literally just sit down and do nothing. You can’t do it, because there’s anxiety always trying to make you get up and go, get up and go, get up and go. I think it’s important just being aware the anxiety is making you unhappy. The anxiety is just a series of running thoughts.\nWhen a lot of people say happiness, they mean joy or bliss, but I’ll take peace.\nDesire is a contract you make with yourself to be unhappy until you get what you want.\nThere’s the “five chimps theory” where you can predict a chimp’s behavior by the five chimps it hangs out with the most. I think that applies to humans as well. Maybe it’s politically incorrect to say you should choose your friends very wisely. But you shouldn’t choose them haphazardly based on who you live next to or who you happen to work with. The people who are the most happy and optimistic choose the right five chimps.\nSaving Yourself “Easy choices, hard life. Hard choices, easy life.”\nWhen you really want to change, you just change. But most of us don’t really want to change—we don’t want to go through the pain just yet. At least recognize it, be aware of it, and give yourself a smaller change you can actually carry out.\nNumber one: read. Read everything you can. And not just the stuff that society tells you is good or even books that I tell you to read. Just read for its own sake. Develop a love for it. Even if you have to read romance novels or paperbacks or comic books. There’s no such thing as junk. Just read it all.\nRelated to the skill of reading are the skills of mathematics and persuasion. Both skills help you to navigate through the real world.\nPhilosophy Honesty is a core, core, core value. By honesty, I mean I want to be able to just be me. I never want to be in an environment or around people where I have to watch what I say.\nAnother example of a foundational value: I don’t believe in any short-term thinking or dealing. If I’m doing business with somebody and they think in a short-term manner with somebody else, then I don’t want to do business with them anymore.\nI would say my philosophy falls down to this—on one pole is evolution as a binding principle because it explains so much about humans, on the other is Buddhism, which is the oldest, most time-tested spiritual philosophy regarding the internal state of each of us.\n","permalink":"https://brianrahadi.github.io/posts/navalmanack/","summary":"Building Wealth Understand How Wealth Is Created It’s not really about hard work. You can work in a restaurant eighty hours a week, and you’re not going to get rich. Getting rich is about knowing what to do, who to do it with, and when to do it. It is much more about understanding than purely hard work.\nWealth is the thing you want. Wealth is assets that earn while you sleep.","title":"Book Summary - The Almanack of Naval Ravikant"},{"content":" \u0026ldquo;The ability to perform deep work is becoming increasingly rare at exactly the same time it is becoming increasingly valuable in our economy.\u0026rdquo;\n What is Deep Work? “Professional activity performed in a state of distraction-free concentration that push your cognitive capabilities to their limit. These efforts create new value, improve your skill, and are hard to replicate.”\nTypes of Deep Work\n Monastic → Full deep work, Bimodal → Seasonal deep Work, Journalistic → Anytime deep work The Rhythmic Philosophy of Deep Work Scheduling → The easiest way to consistently start deep work sessions is to make it a habit. (Block off several hours everyday for deep work)  Building Deep Work Routine\n Location → Distraction free for long periods of focus. Use noise canceling headphones and be consistent with your environment. Duration → Start small and use podomoro technique Structure → Define your deep work. (Phone shut down, measurement of success) Requirements → Music choice, beverage of choice  Execute a Grand Gesture\n “By leveraging a radical change to your normal environment, coupled perhaps with a significant investment of effort or money, all dedicated toward supporting a deep work task, you increase the perceived importance of the task.”\n ","permalink":"https://brianrahadi.github.io/posts/deepwork/","summary":"\u0026ldquo;The ability to perform deep work is becoming increasingly rare at exactly the same time it is becoming increasingly valuable in our economy.\u0026rdquo;\n What is Deep Work? “Professional activity performed in a state of distraction-free concentration that push your cognitive capabilities to their limit. These efforts create new value, improve your skill, and are hard to replicate.”\nTypes of Deep Work\n Monastic → Full deep work, Bimodal → Seasonal deep Work, Journalistic → Anytime deep work The Rhythmic Philosophy of Deep Work Scheduling → The easiest way to consistently start deep work sessions is to make it a habit.","title":"Book Summary - Deep Work"},{"content":" We need a paradigm, paradigm is the way you see something, your point of view. Paradigms need to be principle-centered\n   Be Proactive\n Proactive is the opposite of reactive. They are the one who have the control over your attitude. They make choices based on values. They think before they act. They recognize that they can’t control everything that happens to them, but they can control what they do about it. Being proactive is a price to be paid. You need to have responsibility over your choices, find a way to make something happen, and focus on things that you can do. There is only one thing we can control, it is how we respond to what happens to us.    Begin with the End in Mind\n Set our dreams to become reality. Try to imagine what our future self will be one year from now. We need to have our personal mission statement, motto or personal quote that visualize what our life is all about.    Put First Things First\n Urgent + Important = Procrastinator Urgent + Not important = Yes-man (peer pressure) Not Urgent + Important = Prioritizer Not Urgent + Not Important = Slacker    Think Win-Win\n Respect each other equally. Never aim for a situation that only benefits one party    Seek First to Understand, Then to Be Understood\n Eyes + Heart + Ears \u0026gt; Mouth Feel the emotion they express rather than each words they presented    Synergize\n 2 heads always better than one Everyone learn and think differently. Define Problem → Your way → My way → Brainstorming → High Way    Sharpen the Saw\n 4 body parts you should train regularly  Body → Exercise, eat healthy, sleep well, and relax Brain → Education, side hustle Heart → Train your emotions so you are the one that control it. Focus on PBA and RBA Soul → Devotion, journalling, meditating.       💡 1-3 = Private victory, 4-6 = Relationship victory, 7 = Renewal ","permalink":"https://brianrahadi.github.io/posts/7habits/","summary":"We need a paradigm, paradigm is the way you see something, your point of view. Paradigms need to be principle-centered\n   Be Proactive\n Proactive is the opposite of reactive. They are the one who have the control over your attitude. They make choices based on values. They think before they act. They recognize that they can’t control everything that happens to them, but they can control what they do about it.","title":"Book Summary - 7 Habits of Highly Effective Teens"},{"content":" \u0026ldquo;The simple truth is that the brute force techniques used by most students are incredibly inefficient.\u0026rdquo; - Cal Newport\n   Study in focused, but short blocks rather than pseudo-working through the night.\n Find your ideal study length. (50 minutes with 10 minutes rests, 30-5) Manage the time in daily calendar that can be updated so you can strictly follow it.    Find your most common excuses with a work progress journal\n Write down the important tasks of each day and check off everything you\u0026rsquo;ve accomplished at night Give an explanation for everything that didn\u0026rsquo;t get done.    Use the three P\u0026rsquo;s to move through exams smoothly\n Planning → Flip through the entire exam with questions to answer, and map out the time needed to answer those questions. Proceeding → Answer the question starting with the easier ones to the hard ones so you can get quick wins first to boost confidence. Proofreading → Use last 10 minutes to proofread and correct any mistake you find or add important information   💡 Use spaced repetition to actively recall the information on your brain (That is why studying on blocks is better than cramming)    ","permalink":"https://brianrahadi.github.io/posts/straighta/","summary":"\u0026ldquo;The simple truth is that the brute force techniques used by most students are incredibly inefficient.\u0026rdquo; - Cal Newport\n   Study in focused, but short blocks rather than pseudo-working through the night.\n Find your ideal study length. (50 minutes with 10 minutes rests, 30-5) Manage the time in daily calendar that can be updated so you can strictly follow it.    Find your most common excuses with a work progress journal","title":"Book Summary - How to Become a Straight-A Student"},{"content":" ”We are what we repeatedly do. Excellence is not an act, but a habit.” - Aristotle\n “The costs of your good habits are in the present. The costs of your bad habits are in the future.”\n Habits = Freedom: “Habits do not restrict freedom. They create it. In fact, the people who don’t have their habits handled are often the ones with the least amount of freedom.” Systems \u0026gt; Goals: “My results had very little to do with the goals I set and nearly everything to do with the systems I followed.” You do not rise to the level of your goals. You fall to the level of your systems. Effective Habits: “There are no good habits or bad habits. There are only effective habits. That is, effective at solving problems.” Clarity \u0026gt; Motivation: “Many people think they lack motivation when what they really lack is clarity. It is not always obvious when and where to take action. Some people spend their entire lives waiting for the time to be right to make an improvement.” Environment \u0026gt; Motivation: “Motivation Is Overrated; Environment Often Matters More…Conventional wisdom holds that motivation is the key to habit change. Maybe if you really wanted it, you’d actually do it. But the truth is, our real motivation is to be lazy and to do what is convenient. And despite what the latest productivity best seller will tell you, this is a smart strategy, not a dumb one.” Change your outcome-based habits (I am quitting smoking because i want to be healthy) to identity-based habits (I am not a smoker, why should i smoke?)  Building Good Habits\n  Cue (Make it Obvious) : Implement habit stacking with time and location also add things you want to do around you.\n To break bad habit, reduce your exposure towards the cue of bad habits    Craving (Make it Attractive) : Use temptation bundling (After workout, you can finally take a shower and break)\n 💡 More probable behaviour reinforces less probable behaviour   Your environment around you shapes you. (Workout community support each other to become fit) For bad habits, you can shift your mindset that this particular habit destroys you and it is not attractive at all.    Response (Make it easy) : Start very small everyday, but never stop or go backward\n  Reward (Make it satisfying)\n  ","permalink":"https://brianrahadi.github.io/posts/atomichabits/","summary":"”We are what we repeatedly do. Excellence is not an act, but a habit.” - Aristotle\n “The costs of your good habits are in the present. The costs of your bad habits are in the future.”\n Habits = Freedom: “Habits do not restrict freedom. They create it. In fact, the people who don’t have their habits handled are often the ones with the least amount of freedom.” Systems \u0026gt; Goals: “My results had very little to do with the goals I set and nearly everything to do with the systems I followed.","title":"Book Summary - Atomic Habits"},{"content":"Intro My name is Brian Rahadi. An Indonesian student currently studying Computer Science in Vancouver, BC.\nDuring my time here, I realized how beautiful life is. This website will be my main place to dump ideas and share it into the world.\nSince my freshman year of college, I have developed a keen interest of computer software. There will be many more things that I have not yet to figure out :).\nI enjoy meeting and talking to new people. If you do too, just add me through any of my social media in my home.\nHobbies I enjoy reading books. Here is a list of books that I have read and recommend: P.S. My earlier read will be a summary, but I will shift more towards a review style later on.\n  Atomic Habits by James Clear Such a good book that helps you to learn the significance of habit and somehow reading it is a bit addicting.\n  How to Become a Straight-A Student by Cal Newport The title can sound cringy I know, but this book changed my perspective about studying. It has helped me to study effectively to enjoy life outside more.\n  7 Habits of Highly Effective Teens by Sean Covey One of my first self-help books. It is based on the more popular book by the author\u0026rsquo;s father. For me, the main lesson here is to always think win-win. The game of life is not as competitive as it seems.\n  Deep Work by Cal Newport Similar philosophy with Straight-A student, but there is more significance to it. I truly believe that a satisfying work leads to a satisfying life, and this book will help you to achieve that.\n  The Almanack of Naval Ravikant by Eric Jorgenson Contains a lot of knowledge in a quite short book. Naval Ravikant will teach you about money creation, philosophy, and happiness.\n  Everything is Fucked Up by Mark Manson The book that helps me to become more honest and being more in control with my life.\n  Sometimes You Win - Sometimes You Learn by John C. Maxwell My first self-help book. In this book, it gives an insight on why losing is not necessarily bad and embracing it will make you to learn better.\n  The Subtle Art of Not Giving a Fuck by Mark Manson Mark Manson is very funny. In this book, he delivers life philosophy 101 packed with many swear words. Life is short and this book makes you realize to just focus on what matters more.\n  ","permalink":"https://brianrahadi.github.io/about/","summary":"Intro My name is Brian Rahadi. An Indonesian student currently studying Computer Science in Vancouver, BC.\nDuring my time here, I realized how beautiful life is. This website will be my main place to dump ideas and share it into the world.\nSince my freshman year of college, I have developed a keen interest of computer software. There will be many more things that I have not yet to figure out :).","title":"About Me"}]